import numpy as np
import re
import matplotlib.pyplot as plt
import pandas as pd

#cg138
hg_start = 74888911

mean = 190
# var from the right
# 617(~mean+3std) - 190(mean) = 427/3
# std = 142.33
std_right = 142
min_len = 44
max_len = 617
beta_expected = 0.8
probe_size = 45
# beta_expected = 1
min_hib = 6
min_prob_loc, max_probe_loc = 0, 0

# cg06493994 - on the gene SCGN - not from the chip but indeed horvarth clock site
SCGN = """
GTGCCATAAAGAAAAGTTACATCTGGTTCAACTTTCTTATCTAATATCCA
AGCACTTTCTATAGATTATCCAACGAAAATTTCTAAATATATAGTCAAAA
GGTATCAGTGTAGTTTGTACACGTTTCCACAAAGCCTTGCCCAATTTTGA
ACAGTCCTGATTGTTAGAAAGCTCTGTGTTCCTCCAACTGATTTTTATCC
TTTGGTCTTAATGTGGCTCTTAGGAGCCAAACACAATCATCTAAGCCTTC
TACCTAAGTACCCTGCAGGCAGACACATCTCCCCCAGACTCTCTTTTCCT
GGCAGAGTACGGCTTAGTTTATATTTTCCTCAGCATCCTAATGATGCTAC
TTTAAATCACAGTGACTTGCAGTATCCCTGTTTAGTTGCAAGTCCTTATA
GTGCATTTTGGTACAGCAATGTGTATGTCCTATACAATCAGGACTCAATA
ATTGCTGTTGACTTCTTCCTTAAAGGGAACCACTTACCACCATCACCATC
CCTTCTCGCCTCCCCTCTCCACACACTACATTTCTAAATCCTCAAGTCCA
AAGGACCCTAACACTGACACTTCTTGCAACCCTTTAAATGAGGCAGCTCT
CCCTAGAAAACCCCTTGAGACACAAGTTTGGAAAGTGAGTCAAACGTAAG
AGGGATGTCTTCTCCGAGTCTGAGAAGCAAGTTAAAGGGCAAAAGCAGTG
AGCCGTGGACGCCTGGAGACAGTTTCTTTCTTCCTGAATTCCCCAAAGCG
CAGAGACAGACAGGATCTGCCAGGACAGCGCGCAGGGCGGGGCGGGGACA
GGCGCGCCAGGAGCGGGGCGGGCTTCCAGCCGCTGGTTTTGCTGAGGGCT
GAGGGACGGCTCAGCGACGCCACGGCCAGCAGCGCTCGCGTCCTCCCCAG
CAACAGTTACTCAAAGCTAATCAGATAGCGAAAGAAGCAGGAGAGCAAGT
CAAGAAATACGGTGAAGGAGTCCTTCCCAAAGTTGTCTAGGTCCTTCCGC
GCCGGTGCCTGGTCTTCGTCGTCAACACCATGGACAGCTCCCGGGAACCG
ACTCTGGGGCGCTTGGACGCCGCTGGCTTCTGGCAGGTCTGGCAGCGCTT
TGATGCGGATGGTGAGTAGAACAAGCCACTTGCACACTCAGGTGTAGACG
TGGCTCCAAGCTCAGCCCGCTGAAAGGACCTGGAGTTTCCCCTTTACTGT
AGGAAAAGTTATCGACCTGGGTTGTTAATGCAGTGTACCTAATACAGTAT
CATTAACAGACGTTTGGCATACTGGTGATACACATCTATATACCTTGTTA
AAATTCTGGGTGGTGAATTTCCACTTTCCCCTTTCCAATCTCTCTTTGTG
TGCGAGCGCGCCATATATATGGTAGACATACATATATATTGTATATACAA
TGACTAATATCATTGTATATGTTCAAGGCTTGTGGGCTGAGACTCAGCTA
TTTGAAGTCATCCTTCCCTAAATGGGCTCACTTTTACGCAGTGACTTTGC
TGTACACCCCTCACTCTCTCAAAATGAGAATAAATTTTATCAGCTTTCAA
AACGACTCCTCCACCAAAAAACTACTTGAAAATAAAATGGAACTACTTAA
TATTTGTTTTTATTAATAAAGAAATAAAATATCTAAAAGGTGTGTTTTAA
CTCTGCAAACTGGGATTCAATACTTACACCTGTTAAGTTTCTCCAAGCTT
CAGAAATTTTGGGGTTAAATTTTATTGGAAAGTTCACGTTTATTCATTGA
TTAAAATTCATGTACTTAATAGCCTTCCTTTTCCAAGCACTAATATAAAC
CCTAGCATAAAGCACGTATTCTGGAACAGTGTTTACTGTTCAAACCCATG
TATTCTAGAGGTAGGTGTTGGCACTTTGTTATTGGAATAACAAAAAATAG
TGTTGAGGGAAGCTTTATGAATTGTGAGATTAAAAACATATTTAGATAAA
TACTGTCATGTGTTTTTTATATGTTAGTATTATTTATGTTTATTTTCTCA
C
"""

cg13828047 = """
CCTCCTAAGGTGCTAGGATTACAGGCCTGAGCCACTGACTGTCCTCCTCC
TAGGAGGCTGTTGACTGAGAAGGTCTGGATGTCAAAGCCTTTCACCACAG
GATATAGCCAAGATTACTGCAGAGCCAAGGCCCAAGGCCATCCTTCCCTA
TGCACAGCTCTTCGTAATTCCCCTGACTTCTGTGTGTGCAACTTGTAAGC
AGCTCAGCCTGGAGTAGAAGTTGGGGTTCTGACTTTCTACAGCACCTGGG
ACGGGAAGGATCAGAGGAGCACAGGGAGCTGACTGCCTTATAGGTGTCTC
ACGTCATCCCATCTGACCCTCCAACAAGCATGTCAGGCTGGCATTATTCA
CCCCATTCTACAAAGCTCAGAGCAGTGAAGGGCCTTGCATGTGACATTTA
CCATCATCATCACTAGTATGTCCCTACTCACATCACAGCAATTCTTTGCT
CAAATCTGTAATTGCTGAGACTCGAAGTAAAACCCAAAGTCTTCACAATA
GCAATAGCCTGCAAAGCTCTGCCCCCCTCCTCTCTTCTCTGACCTCCTCA
CTGCCCCTGTCTTACTCACTCTGCTCCAGCCACAGTGGCCTCCTTGCTAG
CAGTTCCCTCCCCAACACGCCCGGCACAGTCCCACATTCCCGCCTTGCTC
TGGCTTCCGCTGTGGCTGTTTCCTCCCCGCAGAACACTCCTGCCTTCCTC
ACCGCCAAGTCTGGACTCAAACCTCACCTCCTCAAGAGGCTTGCCCAGAC
AGCCTTTTATATTCTGCAAACTGCCTCCCACTGCCACCTGCCCCCTTACT
TTTTGTGGCCTTGACCTTTCAACATACTACATGATTTGCTTACAATACTT
GTCTGTCTTGCCTTCACCAGAATGTAAGCGCTCTACAAAGGCAGAGGGAA
GGCTATCTTGCTCTCTGATGTATCCTCCAGCCCTTAGAACAGTCCGTGGT
ACTTAGCAGGTTTTCAGTACATCTGTGCCCGGCGATGGAAAGAATGAATG
AATAGTGAGACCGAAGATCGCGGCCGTAAGCCTCTGGGCACGGGTGCCCC
GGGGCCTGGCGGAACGCTCAGGGAACTACATTTCCCGTGAAGCTCTGGGC
GCAGAGGGCCGCGGGGGCTGCCGGGAAAGGCATACGTGCTTAATCCTGGT
GCAGGGGGCGAGCATGGCCGCTCCGCGAGGTGAGCCATTGGCTGGGGTGT
CGGCGAGTGTGTTCGTGGAGCGCGTCCTGGGGACGACTCCCGGCATTATC
GGCCAGGTTGAGTCCGCTCCTGGCATTCCGCGGAAAGATGGGTGGGTGCC
GGGCAGAGGTGTGGCCACCTGCGATGGGGATTGACCTCCGAGGGGAGGGG
GCCCTTCTAGACGTCGTGCCGTGGGATAGGTACCTTCTGCTCCCTCCCCG
CCACCCTGCCTCAGATCAGCACAAGGTCCTTACTGCTGCCCATCTGACAG
TTGGGAACATCGAGGCCTGCAGCGGAGGGGGGTCTCATCCAACAGCCTAC
AAAACCCTTATTTGACTCTGTCCCCAGTGAGCACCCCCAGCTCTTGCCTG
GTTTCCCGGGACACTAGGGTGGGGCCTGAGGAGTGGAGTGGCAGCTGACC
CTGTCTGTGCCCCTAGTATTCCCACTTTCCTGTGCGGTGCAGCAGTATGC
CTGGGGGAAGATGGGTTCCAACAGCGAAGTGGCGCGGCTGTTGGCCAGCA
GTGATCCACTGGCCCAGATCGCAGAGGACAAGCCTTATGCAGAGGTGAGC
CCCGGGCTGTATTTCAGCCCACTTTACCCGCAGGTCAGGAGAAAGGGCCT
GAGGCAAGTCATAAGAATCAGCTGGGAAGGGTGAGGCAGCAAGGAGGGAG
GAGACCCACTTGGCTCTTCAGGCTAATGGACTAGATAGTGTTATCAAAAA
GAAGAGAGGTTTTGTCATAATAGGCTGGGATTTCCAGCACTCTCCTTCCC
CCAACCACTCTTAGCACTTAGTGAATTTTAATTCAGCCCTCTTTGACAAT
TAAGTTTTTTTACTTTGACTATTTTTTTGCATTTTTATTAACCTAA
"""

cg22197830 = """
TCTTTTTGATGGGCATAGAGATAAGGGGACTATGGCCACACCATCAGAAT
TGTATTATTCAATTAATAATGCCTACCACTTTGAAATGCTTCCTGTGCCC
CAGGACACTGTGCTCATCACTTTACATCTCATTTCATCTATAAGACTCTA
TATAACGTCATTTCCACTTTACAGCTGAAGAAACTTAACTTTAAGTTACA
TAACCTGCTGACTGTGAACTATCACATGTGCTGAAGTTGGGATTCACCAA
GCGGCCAAAAAGCACAGGTTCCCCTTACCATTGCTATGTTAACCAATAGA
CTGATGTATTTTAAATCAGTTTCTATTTTTTCAACCTCATAAGTTTGAAA
AGCTGCACTCTGCACTGATTTAGCACTGACTGGTGGCTGCTTAAAGCTTG
CCTTATTCCATTTTAGCAGGCCCCCCGGCAAAATACCCCAATTAGTGGTG
TCATCCTCTCTATTCCAAGAATTTTCTCTTAAGACTCCCGCTCTGTGCGT
TTGCTTGGGAATGCAGAGCCCTGTTCCTCATCTCCCCATCTATGCTTTCT
TCATTCTAAGCCCTTTCCTATCTACTTTATGCTCGAGGTGGCTCCACCTC
CACCATGAGCCAGAGCCAATGATGCTCACGGCCCCAACCATGATTAAAAA
GAGATTGCCCTGCAAGGTAAATCAGTTAAAACCAACCTCTCCTGCCCTGA
GTGGATAGGTAGGGTTAGGGTTGCCAGATGTCACGAAGTTACAGGATGCT
CAGTTTTAAGGTATATCCCTTATACTATAAGGGTTATAGTAAAAAATATT
CATTATGTGAAATTCAAATATAACTGGGTATCAGGTATTCTATGTGGCAA
CCCTAGGTAGGGGAGCACAGGTTAGGCAAGCGATTAGAAGATTTGCAGCC
TCCAAAGTTTCTGCACCTCGATGGGACACTAGAACAGGAAGGCTCCTGGG
CCTTTCTGGCTCTGGGAATGAAGCGTGGAAAACCCTCCTTAGGCGGGCGC
AGTGCTTCAAGTAGCCAAGCTCTGACTTCCGAGGGAAGAAAGGAGGCCAT
GGGCCTCTGCCAGAGCCATGCTCTGCACTCTGGGGTCAGCAGAGTTCAAA
ACGACCTGCAACGTCTGGCGCTTAGCTCCTAAAGAGGTCTCCAGTCCAGC
GCCGACGGCCAGCGGCTAGAGGCCGTCCGCCCGACTCCAAGATGGCGCCC
GCCACAGCTGCCAGGTGTTAAGATGGCGGCGCGGGGCCGCGCCCGCGCTC
CCAGGCTCTCCTCCCCCAGCCTTCCTCCGGCTGGCAGCACGACTCGCGTA
GCCGTGCGCCGATTGCCTCTCGGCCTGGGCAATGGTCCCGGCTGCCGGTC
GACGACCGCCCCGCGTCATGCGGCTCCTCGGCTGGTGGCAAGTATTGCTG
TGGGTGCTGGGACTTCCCGTCCGCGGCGTGGAGGGTGAGTGTGGGCCGGG
GGCGGTGCATGAGATGATGGGGCGAGCTGAGGTCCACCCGGGCGACGCTC
TGGACCTGCGCGAAGGCCGGCGGTGCGCGACTCGCCCCTTCTTGGCGTCT
CCCCGGGCGCGTCTCCCCGACTTCTCTCCCCGCGCACCGCCCGCTGGTGG
CCCGCGAAAGGGGGCCGGTGGGCTGAGGGCCGGTGGACGGGAGCCCGGGG
GTGGTTGGGCCGCGTTCAGGCCGCCCTCAGCCCGTGGCTGGTAGCCAGGA
GGGACAGTGCGGTAAGCGCTGCTGAGGCATACCCTCTGGTGATAAGCAAT
TTATTATTAATAACATTATATCAAATACCGACATTGTTGTGGCCGTATTA
GGAGCCAGGAACTGTGCATCGTGCTTTATTTACATCATTATCCCATTTAA
TGCTCCCACAAACCCTGTCAGATCGGTTCCGTTTAGTGTCTCCATTTCAC
AGATGAAGATGCTCAGGCCCCGCCTAAGTTTGCGCTTCTGATACGTGGCA
GAAGCCTGTCTCTCTGACGCCAAAGCCCAGTCTGGAGTCCACGCTGCTGG
ACCACTGTCTTAAGGAGGCCAGTCTTGCTCAGCTCCCTGCATGAAA
"""


def probe_init(seq):
    global min_prob_loc, max_probe_loc
    seq_temp = re.sub('[^A-Za-z0-9]+', '', seq)
    seq_temp = seq_temp[1:-1]

    min_prob_loc = round((len(seq_temp) - 1) / 2 - probe_size / 2)
    max_probe_loc = round((len(seq_temp) - 1) / 2 + probe_size / 2)

    probe = seq_temp[min_prob_loc:max_probe_loc]

    return [seq_temp, probe]
def get_from_norm_len():
    y_values = np.random.normal(mean, std_right, 1)
    y_values = int(y_values[0])
    while(y_values<probe_size):
        y_values = np.random.normal(mean, std_right, 1)
        y_values = int(y_values[0])
    else:
        return y_values

    """
    if (y_values < 44):
        return 44
    elif (y_values > 617):
        return 617
    else:
    """

# then we randomly select a subset which will be our specific "measured" event:
# DNA with a random length was connected to the probe on a random location
def get_random_substring(main_str):
    # for now it's a uniform distribution, but it can be replaced
    # substr_len = random.randint(min, max)

    substr_len = get_from_norm_len()
    idx_max = min_prob_loc
    idx_min = min_prob_loc - substr_len + probe_size
    if idx_min < min_prob_loc:
        idx = np.random.randint(idx_min, high=idx_max, size=1, dtype=int)[0]
    else:
        idx = min_prob_loc

    return [idx, main_str[idx: (idx + substr_len)]]

def calc_intensity(str, meth):
    if meth:
        return 0
    else:
        return str.count('CG')

def calc_vec(probe, meth):
    if meth:
        probe = probe.replace('CG', '00')
        probe = probe.replace('GC', '00')
        probe = re.sub('\D', '0', probe)
    else:
        probe = probe.replace('CG', '10')
        probe = probe.replace('GC', '01')
        probe = re.sub('\D', '0', probe)

    return [int(x) for x in probe]


def probe_expected_range(probe):
    probe_vec_meth = calc_intensity(probe, True)
    probe_vec_unmeth = calc_intensity(probe, False)

    meth_expected_val = probe_vec_meth * beta_expected
    unmeth_expected_val = probe_vec_unmeth * beta_expected

    return [meth_expected_val, unmeth_expected_val]

def run_that_ship_debug(probe):
    print("The whole probe region:", probe)
    # create simulation sample study case
    sample_probe = get_random_substring(probe)
    print("binding event region:", sample_probe)
    # calculate intensity for sample methylated study case
    sim_meth = calc_intensity(sample_probe, True)
    print("intensity value if the regions is methylated:", sim_meth)
    # calculate intensity for sample un-methylated study case
    sim_unmeth = calc_intensity(sample_probe, False)
    print("intensity value if the regions is un-methylated:", sim_unmeth)

def partial_match(binnded_dna, probe, min):
    retuls = []
    for i in range(0, len(probe) - min):
        if probe[i:i + min] in binnded_dna:
            return probe[i:i + min]

    return False

def run_that_ship_1(probe):
    idx, sample_probe = get_random_substring(probe)
    sim_unmeth = calc_intensity(sample_probe, False)
    # print("binded probe: ", sample_probe)
    # print("cg number: ", sim_unmeth)
    # print("is binded to probe: ", partial_match(sample_probe,probe,6))
    return sim_unmeth, idx, len(sample_probe), sample_probe

def run_that_ship_2(probe):
    CGS = []
    idxes = []
    lens = []
    probe_seq = []
    for i in range(0, 1000, 1):
        res = run_that_ship_1(probe)
        CGS.append(res[0])
        idxes.append(res[1])
        lens.append(res[2])
        probe_seq.append(res[3])

    plot_this(CGS, "number of CG")
    plot_this(np.array(idxes) - np.array(len(idxes)*[1000]), "distance from probe left")
    plot_this(np.array(idxes) + np.array(lens) - np.array(len(idxes)*[1000]), "distance from probe right")
    plot_this(lens, "Bounded DNA length")

    with open("results_20.fasta", "w") as output:
        for l in probe_seq:
            output.write(str(l)+"\n")
    with open("results_20.bed", "w") as output:
        for i,le in zip(idxes,lens):
            output.write("chr15\t"+str(hg_start+i)+"\t"+str(hg_start+i+le)+"\n")

    return [CGS, idxes, lens]

def plot_this(results, disc):
    global probe_id

    plt.hist(results,bins = 100,width=5)
    plt.title(f"Results for {probe_id} probe")
    plt.suptitle(f"Sum:{np.sum(results)}, Average: {np.mean(results)}, Std: {np.std(results)}")
    plt.xlabel(f"{disc}")
    plt.ylabel("frequency in 1M iterations")

    res_freq = pd.value_counts(results)
    #plt.xticks(np.arange(min(results), max(results) + 1, 10))
    #plt.yticks(np.arange(min(res_freq), max(res_freq) + 1, 2000))
    plt.savefig(f"{probe_id}_{disc}.png")
    plt.clf()

def CpG_counter(probe_seq):
    counter = []
    indexes = range(0,len(probe_seq)-1,50)
    for i in indexes:
        counter.append(probe_seq[i:i+50].count('CG'))

    indexes = range(-round(len(probe_seq)/2),round(len(probe_seq)/2),50)

    plt.plot(indexes, counter)
    plt.title(f"{probe_id}: CpG concentration in 50 bp")
    plt.ylabel("freq")
    plt.xlabel("position to probe (bp)")


def run_that_ship_3(probe):
    CGS = []
    results = []
    for i in range(0,10,1):
        for i in range(0, 1000, 1):
            res = run_that_ship_1(probe)
            CGS.append(res[0])
        results.append(np.sum(CGS))
        CGS = []

    with open("results_1000.txt", "w") as output:
        for res in results:
            output.write(str(res)+"\n")

probe_id = "cg13828047"
cg13828047_seq, cg13828047_probe  = probe_init(cg13828047)
#CGS,idxes,lens = run_that_ship_2(cg13828047_seq)
#CpG_counter(cg13828047_seq)
run_that_ship_3(cg13828047_seq)

"""
probe_id = "cg22197830"
cg22197830_seq, cg22197830_probe  = probe_init(cg22197830)
CGS,idxes,lens = run_that_ship_2(cg22197830_seq)
"""
